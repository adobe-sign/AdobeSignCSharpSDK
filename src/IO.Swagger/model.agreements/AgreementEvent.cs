/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.model.agreements
{
    /// <summary>
    /// AgreementEvent
    /// </summary>
    [DataContract]
    public partial class AgreementEvent :  IEquatable<AgreementEvent>, IValidatableObject
    {
        /// <summary>
        /// Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).
        /// </summary>
        /// <value>Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipantRoleEnum
        {
            
            /// <summary>
            /// Enum SIGNER for value: SIGNER
            /// </summary>
            [EnumMember(Value = "SIGNER")]
            SIGNER = 1,
            
            /// <summary>
            /// Enum DELEGATETOSIGNER for value: DELEGATE_TO_SIGNER
            /// </summary>
            [EnumMember(Value = "DELEGATE_TO_SIGNER")]
            DELEGATETOSIGNER = 2,
            
            /// <summary>
            /// Enum APPROVER for value: APPROVER
            /// </summary>
            [EnumMember(Value = "APPROVER")]
            APPROVER = 3,
            
            /// <summary>
            /// Enum DELEGATETOAPPROVER for value: DELEGATE_TO_APPROVER
            /// </summary>
            [EnumMember(Value = "DELEGATE_TO_APPROVER")]
            DELEGATETOAPPROVER = 4,
            
            /// <summary>
            /// Enum ACCEPTOR for value: ACCEPTOR
            /// </summary>
            [EnumMember(Value = "ACCEPTOR")]
            ACCEPTOR = 5,
            
            /// <summary>
            /// Enum DELEGATETOACCEPTOR for value: DELEGATE_TO_ACCEPTOR
            /// </summary>
            [EnumMember(Value = "DELEGATE_TO_ACCEPTOR")]
            DELEGATETOACCEPTOR = 6,
            
            /// <summary>
            /// Enum FORMFILLER for value: FORM_FILLER
            /// </summary>
            [EnumMember(Value = "FORM_FILLER")]
            FORMFILLER = 7,
            
            /// <summary>
            /// Enum DELEGATETOFORMFILLER for value: DELEGATE_TO_FORM_FILLER
            /// </summary>
            [EnumMember(Value = "DELEGATE_TO_FORM_FILLER")]
            DELEGATETOFORMFILLER = 8,
            
            /// <summary>
            /// Enum CERTIFIEDRECIPIENT for value: CERTIFIED_RECIPIENT
            /// </summary>
            [EnumMember(Value = "CERTIFIED_RECIPIENT")]
            CERTIFIEDRECIPIENT = 9,
            
            /// <summary>
            /// Enum DELEGATETOCERTIFIEDRECIPIENT for value: DELEGATE_TO_CERTIFIED_RECIPIENT
            /// </summary>
            [EnumMember(Value = "DELEGATE_TO_CERTIFIED_RECIPIENT")]
            DELEGATETOCERTIFIEDRECIPIENT = 10,
            
            /// <summary>
            /// Enum SHARE for value: SHARE
            /// </summary>
            [EnumMember(Value = "SHARE")]
            SHARE = 11,
            
            /// <summary>
            /// Enum SENDER for value: SENDER
            /// </summary>
            [EnumMember(Value = "SENDER")]
            SENDER = 12
        }

        /// <summary>
        /// Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).
        /// </summary>
        /// <value>Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).</value>
        [DataMember(Name="participantRole", EmitDefaultValue=false)]
        public ParticipantRoleEnum? ParticipantRole { get; set; }
        /// <summary>
        /// Type of agreement event
        /// </summary>
        /// <value>Type of agreement event</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum ACCESSCODEGENERATED for value: ACCESS_CODE_GENERATED
            /// </summary>
            [EnumMember(Value = "ACCESS_CODE_GENERATED")]
            ACCESSCODEGENERATED = 1,
            
            /// <summary>
            /// Enum ACCESSCODECONSUMED for value: ACCESS_CODE_CONSUMED
            /// </summary>
            [EnumMember(Value = "ACCESS_CODE_CONSUMED")]
            ACCESSCODECONSUMED = 2,
            
            /// <summary>
            /// Enum AUTOCANCELLEDCONVERSIONPROBLEM for value: AUTO_CANCELLED_CONVERSION_PROBLEM
            /// </summary>
            [EnumMember(Value = "AUTO_CANCELLED_CONVERSION_PROBLEM")]
            AUTOCANCELLEDCONVERSIONPROBLEM = 3,
            
            /// <summary>
            /// Enum ACTIONAUTODELEGATED for value: ACTION_AUTO_DELEGATED
            /// </summary>
            [EnumMember(Value = "ACTION_AUTO_DELEGATED")]
            ACTIONAUTODELEGATED = 4,
            
            /// <summary>
            /// Enum ACTIONCOMPLETED for value: ACTION_COMPLETED
            /// </summary>
            [EnumMember(Value = "ACTION_COMPLETED")]
            ACTIONCOMPLETED = 5,
            
            /// <summary>
            /// Enum ACTIONCOMPLETEDHOSTED for value: ACTION_COMPLETED_HOSTED
            /// </summary>
            [EnumMember(Value = "ACTION_COMPLETED_HOSTED")]
            ACTIONCOMPLETEDHOSTED = 6,
            
            /// <summary>
            /// Enum ACTIONCOMPLETEDOFFLINE for value: ACTION_COMPLETED_OFFLINE
            /// </summary>
            [EnumMember(Value = "ACTION_COMPLETED_OFFLINE")]
            ACTIONCOMPLETEDOFFLINE = 7,
            
            /// <summary>
            /// Enum ACTIONCOMPLETEDOFFLINEHOSTED for value: ACTION_COMPLETED_OFFLINE_HOSTED
            /// </summary>
            [EnumMember(Value = "ACTION_COMPLETED_OFFLINE_HOSTED")]
            ACTIONCOMPLETEDOFFLINEHOSTED = 8,
            
            /// <summary>
            /// Enum ACTIONCOMPLETEDWIDGETVERIFIED for value: ACTION_COMPLETED_WIDGET_VERIFIED
            /// </summary>
            [EnumMember(Value = "ACTION_COMPLETED_WIDGET_VERIFIED")]
            ACTIONCOMPLETEDWIDGETVERIFIED = 9,
            
            /// <summary>
            /// Enum ACTIONCOMPLETEDWIDGETVERIFIEDAPITOKEN for value: ACTION_COMPLETED_WIDGET_VERIFIED_API_TOKEN
            /// </summary>
            [EnumMember(Value = "ACTION_COMPLETED_WIDGET_VERIFIED_API_TOKEN")]
            ACTIONCOMPLETEDWIDGETVERIFIEDAPITOKEN = 10,
            
            /// <summary>
            /// Enum ACTIONCOMPLETEDWIDGETVERIFICATIONWAIVED for value: ACTION_COMPLETED_WIDGET_VERIFICATION_WAIVED
            /// </summary>
            [EnumMember(Value = "ACTION_COMPLETED_WIDGET_VERIFICATION_WAIVED")]
            ACTIONCOMPLETEDWIDGETVERIFICATIONWAIVED = 11,
            
            /// <summary>
            /// Enum ACTIONDELEGATED for value: ACTION_DELEGATED
            /// </summary>
            [EnumMember(Value = "ACTION_DELEGATED")]
            ACTIONDELEGATED = 12,
            
            /// <summary>
            /// Enum ACTIONREPLACEDSIGNER for value: ACTION_REPLACED_SIGNER
            /// </summary>
            [EnumMember(Value = "ACTION_REPLACED_SIGNER")]
            ACTIONREPLACEDSIGNER = 13,
            
            /// <summary>
            /// Enum ACTIONREQUESTED for value: ACTION_REQUESTED
            /// </summary>
            [EnumMember(Value = "ACTION_REQUESTED")]
            ACTIONREQUESTED = 14,
            
            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 15,
            
            /// <summary>
            /// Enum CREATEDFROMWIDGET for value: CREATED_FROM_WIDGET
            /// </summary>
            [EnumMember(Value = "CREATED_FROM_WIDGET")]
            CREATEDFROMWIDGET = 16,
            
            /// <summary>
            /// Enum CREATEDOFFLINE for value: CREATED_OFFLINE
            /// </summary>
            [EnumMember(Value = "CREATED_OFFLINE")]
            CREATEDOFFLINE = 17,
            
            /// <summary>
            /// Enum CREATEDVIAUPLOAD for value: CREATED_VIA_UPLOAD
            /// </summary>
            [EnumMember(Value = "CREATED_VIA_UPLOAD")]
            CREATEDVIAUPLOAD = 18,
            
            /// <summary>
            /// Enum CREATEDVIAACROBAT for value: CREATED_VIA_ACROBAT
            /// </summary>
            [EnumMember(Value = "CREATED_VIA_ACROBAT")]
            CREATEDVIAACROBAT = 19,
            
            /// <summary>
            /// Enum CREATEDVIAREADER for value: CREATED_VIA_READER
            /// </summary>
            [EnumMember(Value = "CREATED_VIA_READER")]
            CREATEDVIAREADER = 20,
            
            /// <summary>
            /// Enum ACTIVATED for value: ACTIVATED
            /// </summary>
            [EnumMember(Value = "ACTIVATED")]
            ACTIVATED = 21,
            
            /// <summary>
            /// Enum DIGITALSIGNUIDAISIGNERCONSENT for value: DIGITAL_SIGN_UIDAI_SIGNER_CONSENT
            /// </summary>
            [EnumMember(Value = "DIGITAL_SIGN_UIDAI_SIGNER_CONSENT")]
            DIGITALSIGNUIDAISIGNERCONSENT = 22,
            
            /// <summary>
            /// Enum DIGSIGNED for value: DIGSIGNED
            /// </summary>
            [EnumMember(Value = "DIGSIGNED")]
            DIGSIGNED = 23,
            
            /// <summary>
            /// Enum DEACTIVATED for value: DEACTIVATED
            /// </summary>
            [EnumMember(Value = "DEACTIVATED")]
            DEACTIVATED = 24,
            
            /// <summary>
            /// Enum DOCUMENTSDELETED for value: DOCUMENTS_DELETED
            /// </summary>
            [EnumMember(Value = "DOCUMENTS_DELETED")]
            DOCUMENTSDELETED = 25,
            
            /// <summary>
            /// Enum DOWNLOADED for value: DOWNLOADED
            /// </summary>
            [EnumMember(Value = "DOWNLOADED")]
            DOWNLOADED = 26,
            
            /// <summary>
            /// Enum EMAILBOUNCED for value: EMAIL_BOUNCED
            /// </summary>
            [EnumMember(Value = "EMAIL_BOUNCED")]
            EMAILBOUNCED = 27,
            
            /// <summary>
            /// Enum EMAILVIEWED for value: EMAIL_VIEWED
            /// </summary>
            [EnumMember(Value = "EMAIL_VIEWED")]
            EMAILVIEWED = 28,
            
            /// <summary>
            /// Enum EXPIRED for value: EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED = 29,
            
            /// <summary>
            /// Enum EXPIREDAUTOMATICALLY for value: EXPIRED_AUTOMATICALLY
            /// </summary>
            [EnumMember(Value = "EXPIRED_AUTOMATICALLY")]
            EXPIREDAUTOMATICALLY = 30,
            
            /// <summary>
            /// Enum FAXEDBYSENDER for value: FAXED_BY_SENDER
            /// </summary>
            [EnumMember(Value = "FAXED_BY_SENDER")]
            FAXEDBYSENDER = 31,
            
            /// <summary>
            /// Enum FAXINRECEIVED for value: FAXIN_RECEIVED
            /// </summary>
            [EnumMember(Value = "FAXIN_RECEIVED")]
            FAXINRECEIVED = 32,
            
            /// <summary>
            /// Enum KBAAUTHENTICATED for value: KBA_AUTHENTICATED
            /// </summary>
            [EnumMember(Value = "KBA_AUTHENTICATED")]
            KBAAUTHENTICATED = 33,
            
            /// <summary>
            /// Enum MODIFIED for value: MODIFIED
            /// </summary>
            [EnumMember(Value = "MODIFIED")]
            MODIFIED = 34,
            
            /// <summary>
            /// Enum OFFLINESYNC for value: OFFLINE_SYNC
            /// </summary>
            [EnumMember(Value = "OFFLINE_SYNC")]
            OFFLINESYNC = 35,
            
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 36,
            
            /// <summary>
            /// Enum PAID for value: PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAID = 37,
            
            /// <summary>
            /// Enum PRESIGNED for value: PRESIGNED
            /// </summary>
            [EnumMember(Value = "PRESIGNED")]
            PRESIGNED = 38,
            
            /// <summary>
            /// Enum RECALLED for value: RECALLED
            /// </summary>
            [EnumMember(Value = "RECALLED")]
            RECALLED = 39,
            
            /// <summary>
            /// Enum RECALLEDMAXSIGNINGKBAATTEMPTS for value: RECALLED_MAX_SIGNING_KBA_ATTEMPTS
            /// </summary>
            [EnumMember(Value = "RECALLED_MAX_SIGNING_KBA_ATTEMPTS")]
            RECALLEDMAXSIGNINGKBAATTEMPTS = 40,
            
            /// <summary>
            /// Enum RECALLEDMAXSIGNINGPASSWORDATTEMPTS for value: RECALLED_MAX_SIGNING_PASSWORD_ATTEMPTS
            /// </summary>
            [EnumMember(Value = "RECALLED_MAX_SIGNING_PASSWORD_ATTEMPTS")]
            RECALLEDMAXSIGNINGPASSWORDATTEMPTS = 41,
            
            /// <summary>
            /// Enum RECALLEDMAXSIGNINGPHONEATTEMPTS for value: RECALLED_MAX_SIGNING_PHONE_ATTEMPTS
            /// </summary>
            [EnumMember(Value = "RECALLED_MAX_SIGNING_PHONE_ATTEMPTS")]
            RECALLEDMAXSIGNINGPHONEATTEMPTS = 42,
            
            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 43,
            
            /// <summary>
            /// Enum SENDERCREATEDNEWREVISION for value: SENDER_CREATED_NEW_REVISION
            /// </summary>
            [EnumMember(Value = "SENDER_CREATED_NEW_REVISION")]
            SENDERCREATEDNEWREVISION = 44,
            
            /// <summary>
            /// Enum SHARED for value: SHARED
            /// </summary>
            [EnumMember(Value = "SHARED")]
            SHARED = 45,
            
            /// <summary>
            /// Enum SIGNED for value: SIGNED
            /// </summary>
            [EnumMember(Value = "SIGNED")]
            SIGNED = 46,
            
            /// <summary>
            /// Enum SIGNINGURLREQUESTED for value: SIGNING_URL_REQUESTED
            /// </summary>
            [EnumMember(Value = "SIGNING_URL_REQUESTED")]
            SIGNINGURLREQUESTED = 47,
            
            /// <summary>
            /// Enum UPLOADEDBYSENDER for value: UPLOADED_BY_SENDER
            /// </summary>
            [EnumMember(Value = "UPLOADED_BY_SENDER")]
            UPLOADEDBYSENDER = 48,
            
            /// <summary>
            /// Enum USERACKAGREEMENTMODIFIED for value: USER_ACK_AGREEMENT_MODIFIED
            /// </summary>
            [EnumMember(Value = "USER_ACK_AGREEMENT_MODIFIED")]
            USERACKAGREEMENTMODIFIED = 49,
            
            /// <summary>
            /// Enum VAULTED for value: VAULTED
            /// </summary>
            [EnumMember(Value = "VAULTED")]
            VAULTED = 50,
            
            /// <summary>
            /// Enum WEBIDENTITYAUTHENTICATED for value: WEB_IDENTITY_AUTHENTICATED
            /// </summary>
            [EnumMember(Value = "WEB_IDENTITY_AUTHENTICATED")]
            WEBIDENTITYAUTHENTICATED = 51,
            
            /// <summary>
            /// Enum WEBIDENTITYSPECIFIED for value: WEB_IDENTITY_SPECIFIED
            /// </summary>
            [EnumMember(Value = "WEB_IDENTITY_SPECIFIED")]
            WEBIDENTITYSPECIFIED = 52,
            
            /// <summary>
            /// Enum WRITTENDOWNLOAD for value: WRITTEN_DOWNLOAD
            /// </summary>
            [EnumMember(Value = "WRITTEN_DOWNLOAD")]
            WRITTENDOWNLOAD = 53,
            
            /// <summary>
            /// Enum WRITTENSIGNED for value: WRITTEN_SIGNED
            /// </summary>
            [EnumMember(Value = "WRITTEN_SIGNED")]
            WRITTENSIGNED = 54,

            /// <summary>
            /// Enum URLREAUTHENTICATIONREQUESTED for value: URL_REAUTHENTICATION_REQUESTED
            /// </summary>
            [EnumMember(Value = "URL_REAUTHENTICATION_REQUESTED")]
            URLREAUTHENTICATIONREQUESTED = 55
        }

        /// <summary>
        /// Type of agreement event
        /// </summary>
        /// <value>Type of agreement event</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementEvent" /> class.
        /// </summary>
        /// <param name="ActingUserEmail">Email address of the user that created the event.</param>
        /// <param name="ActingUserIpAddress">The IP address of the user that created the event.</param>
        /// <param name="ActingUserName">The name of the acting user.</param>
        /// <param name="Comment">The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant.</param>
        /// <param name="Date">The date of the audit event. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time.</param>
        /// <param name="Description">A description of the audit event.</param>
        /// <param name="DeviceLocation">Location of the device that generated the event (This value may be null due to limited privileges).</param>
        /// <param name="DevicePhoneNumber">Phone number from the device used when the participation is completed on a mobile phone.</param>
        /// <param name="DigitalSignatureInfo">This is present for ESIGNED events when the participation is signed digitally.</param>
        /// <param name="InitiatingUserEmail">Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect.</param>
        /// <param name="InitiatingUserName">Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect.</param>
        /// <param name="ParticipantEmail">Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to.</param>
        /// <param name="ParticipantId">The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to.</param>
        /// <param name="ParticipantRole">Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.)..</param>
        /// <param name="SynchronizationId">A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null).</param>
        /// <param name="Type">Type of agreement event.</param>
        /// <param name="VaultEventId">The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null).</param>
        /// <param name="VaultProviderName">Name of the vault provider for the vault event (if vaulted, otherwise null).</param>
        /// <param name="VersionId">An ID which uniquely identifies the version of the document associated with this audit event.</param>
        public AgreementEvent(string ActingUserEmail = default(string), string ActingUserIpAddress = default(string), string ActingUserName = default(string), string Comment = default(string), DateTime? Date = default(DateTime?), string Description = default(string), DeviceLocation DeviceLocation = default(DeviceLocation), string DevicePhoneNumber = default(string), DigitalSignatureInfo DigitalSignatureInfo = default(DigitalSignatureInfo), string InitiatingUserEmail = default(string), string InitiatingUserName = default(string), string ParticipantEmail = default(string), string ParticipantId = default(string), ParticipantRoleEnum? ParticipantRole = default(ParticipantRoleEnum?), string SynchronizationId = default(string), TypeEnum? Type = default(TypeEnum?), string VaultEventId = default(string), string VaultProviderName = default(string), string VersionId = default(string))
        {
            this.ActingUserEmail = ActingUserEmail;
            this.ActingUserIpAddress = ActingUserIpAddress;
            this.ActingUserName = ActingUserName;
            this.Comment = Comment;
            this.Date = Date;
            this.Description = Description;
            this.DeviceLocation = DeviceLocation;
            this.DevicePhoneNumber = DevicePhoneNumber;
            this.DigitalSignatureInfo = DigitalSignatureInfo;
            this.InitiatingUserEmail = InitiatingUserEmail;
            this.InitiatingUserName = InitiatingUserName;
            this.ParticipantEmail = ParticipantEmail;
            this.ParticipantId = ParticipantId;
            this.ParticipantRole = ParticipantRole;
            this.SynchronizationId = SynchronizationId;
            this.Type = Type;
            this.VaultEventId = VaultEventId;
            this.VaultProviderName = VaultProviderName;
            this.VersionId = VersionId;
        }
        
        /// <summary>
        /// Email address of the user that created the event
        /// </summary>
        /// <value>Email address of the user that created the event</value>
        [DataMember(Name="actingUserEmail", EmitDefaultValue=false)]
        public string ActingUserEmail { get; set; }

        /// <summary>
        /// The IP address of the user that created the event
        /// </summary>
        /// <value>The IP address of the user that created the event</value>
        [DataMember(Name="actingUserIpAddress", EmitDefaultValue=false)]
        public string ActingUserIpAddress { get; set; }

        /// <summary>
        /// The name of the acting user
        /// </summary>
        /// <value>The name of the acting user</value>
        [DataMember(Name="actingUserName", EmitDefaultValue=false)]
        public string ActingUserName { get; set; }

        /// <summary>
        /// The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
        /// </summary>
        /// <value>The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The date of the audit event. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
        /// </summary>
        /// <value>The date of the audit event. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// A description of the audit event
        /// </summary>
        /// <value>A description of the audit event</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Location of the device that generated the event (This value may be null due to limited privileges)
        /// </summary>
        /// <value>Location of the device that generated the event (This value may be null due to limited privileges)</value>
        [DataMember(Name="deviceLocation", EmitDefaultValue=false)]
        public DeviceLocation DeviceLocation { get; set; }

        /// <summary>
        /// Phone number from the device used when the participation is completed on a mobile phone
        /// </summary>
        /// <value>Phone number from the device used when the participation is completed on a mobile phone</value>
        [DataMember(Name="devicePhoneNumber", EmitDefaultValue=false)]
        public string DevicePhoneNumber { get; set; }

        /// <summary>
        /// This is present for ESIGNED events when the participation is signed digitally
        /// </summary>
        /// <value>This is present for ESIGNED events when the participation is signed digitally</value>
        [DataMember(Name="digitalSignatureInfo", EmitDefaultValue=false)]
        public DigitalSignatureInfo DigitalSignatureInfo { get; set; }

        /// <summary>
        /// Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
        /// </summary>
        /// <value>Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect</value>
        [DataMember(Name="initiatingUserEmail", EmitDefaultValue=false)]
        public string InitiatingUserEmail { get; set; }

        /// <summary>
        /// Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
        /// </summary>
        /// <value>Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect</value>
        [DataMember(Name="initiatingUserName", EmitDefaultValue=false)]
        public string InitiatingUserName { get; set; }

        /// <summary>
        /// Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
        /// </summary>
        /// <value>Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to</value>
        [DataMember(Name="participantEmail", EmitDefaultValue=false)]
        public string ParticipantEmail { get; set; }

        /// <summary>
        /// The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
        /// </summary>
        /// <value>The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to</value>
        [DataMember(Name="participantId", EmitDefaultValue=false)]
        public string ParticipantId { get; set; }


        /// <summary>
        /// A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
        /// </summary>
        /// <value>A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)</value>
        [DataMember(Name="synchronizationId", EmitDefaultValue=false)]
        public string SynchronizationId { get; set; }


        /// <summary>
        /// The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
        /// </summary>
        /// <value>The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)</value>
        [DataMember(Name="vaultEventId", EmitDefaultValue=false)]
        public string VaultEventId { get; set; }

        /// <summary>
        /// Name of the vault provider for the vault event (if vaulted, otherwise null)
        /// </summary>
        /// <value>Name of the vault provider for the vault event (if vaulted, otherwise null)</value>
        [DataMember(Name="vaultProviderName", EmitDefaultValue=false)]
        public string VaultProviderName { get; set; }

        /// <summary>
        /// An ID which uniquely identifies the version of the document associated with this audit event
        /// </summary>
        /// <value>An ID which uniquely identifies the version of the document associated with this audit event</value>
        [DataMember(Name="versionId", EmitDefaultValue=false)]
        public string VersionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgreementEvent {\n");
            sb.Append("  ActingUserEmail: ").Append(ActingUserEmail).Append("\n");
            sb.Append("  ActingUserIpAddress: ").Append(ActingUserIpAddress).Append("\n");
            sb.Append("  ActingUserName: ").Append(ActingUserName).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeviceLocation: ").Append(DeviceLocation).Append("\n");
            sb.Append("  DevicePhoneNumber: ").Append(DevicePhoneNumber).Append("\n");
            sb.Append("  DigitalSignatureInfo: ").Append(DigitalSignatureInfo).Append("\n");
            sb.Append("  InitiatingUserEmail: ").Append(InitiatingUserEmail).Append("\n");
            sb.Append("  InitiatingUserName: ").Append(InitiatingUserName).Append("\n");
            sb.Append("  ParticipantEmail: ").Append(ParticipantEmail).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  ParticipantRole: ").Append(ParticipantRole).Append("\n");
            sb.Append("  SynchronizationId: ").Append(SynchronizationId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VaultEventId: ").Append(VaultEventId).Append("\n");
            sb.Append("  VaultProviderName: ").Append(VaultProviderName).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgreementEvent);
        }

        /// <summary>
        /// Returns true if AgreementEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of AgreementEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgreementEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActingUserEmail == input.ActingUserEmail ||
                    (this.ActingUserEmail != null &&
                    this.ActingUserEmail.Equals(input.ActingUserEmail))
                ) && 
                (
                    this.ActingUserIpAddress == input.ActingUserIpAddress ||
                    (this.ActingUserIpAddress != null &&
                    this.ActingUserIpAddress.Equals(input.ActingUserIpAddress))
                ) && 
                (
                    this.ActingUserName == input.ActingUserName ||
                    (this.ActingUserName != null &&
                    this.ActingUserName.Equals(input.ActingUserName))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DeviceLocation == input.DeviceLocation ||
                    (this.DeviceLocation != null &&
                    this.DeviceLocation.Equals(input.DeviceLocation))
                ) && 
                (
                    this.DevicePhoneNumber == input.DevicePhoneNumber ||
                    (this.DevicePhoneNumber != null &&
                    this.DevicePhoneNumber.Equals(input.DevicePhoneNumber))
                ) && 
                (
                    this.DigitalSignatureInfo == input.DigitalSignatureInfo ||
                    (this.DigitalSignatureInfo != null &&
                    this.DigitalSignatureInfo.Equals(input.DigitalSignatureInfo))
                ) && 
                (
                    this.InitiatingUserEmail == input.InitiatingUserEmail ||
                    (this.InitiatingUserEmail != null &&
                    this.InitiatingUserEmail.Equals(input.InitiatingUserEmail))
                ) && 
                (
                    this.InitiatingUserName == input.InitiatingUserName ||
                    (this.InitiatingUserName != null &&
                    this.InitiatingUserName.Equals(input.InitiatingUserName))
                ) && 
                (
                    this.ParticipantEmail == input.ParticipantEmail ||
                    (this.ParticipantEmail != null &&
                    this.ParticipantEmail.Equals(input.ParticipantEmail))
                ) && 
                (
                    this.ParticipantId == input.ParticipantId ||
                    (this.ParticipantId != null &&
                    this.ParticipantId.Equals(input.ParticipantId))
                ) && 
                (
                    this.ParticipantRole == input.ParticipantRole ||
                    (this.ParticipantRole != null &&
                    this.ParticipantRole.Equals(input.ParticipantRole))
                ) && 
                (
                    this.SynchronizationId == input.SynchronizationId ||
                    (this.SynchronizationId != null &&
                    this.SynchronizationId.Equals(input.SynchronizationId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.VaultEventId == input.VaultEventId ||
                    (this.VaultEventId != null &&
                    this.VaultEventId.Equals(input.VaultEventId))
                ) && 
                (
                    this.VaultProviderName == input.VaultProviderName ||
                    (this.VaultProviderName != null &&
                    this.VaultProviderName.Equals(input.VaultProviderName))
                ) && 
                (
                    this.VersionId == input.VersionId ||
                    (this.VersionId != null &&
                    this.VersionId.Equals(input.VersionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActingUserEmail != null)
                    hashCode = hashCode * 59 + this.ActingUserEmail.GetHashCode();
                if (this.ActingUserIpAddress != null)
                    hashCode = hashCode * 59 + this.ActingUserIpAddress.GetHashCode();
                if (this.ActingUserName != null)
                    hashCode = hashCode * 59 + this.ActingUserName.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DeviceLocation != null)
                    hashCode = hashCode * 59 + this.DeviceLocation.GetHashCode();
                if (this.DevicePhoneNumber != null)
                    hashCode = hashCode * 59 + this.DevicePhoneNumber.GetHashCode();
                if (this.DigitalSignatureInfo != null)
                    hashCode = hashCode * 59 + this.DigitalSignatureInfo.GetHashCode();
                if (this.InitiatingUserEmail != null)
                    hashCode = hashCode * 59 + this.InitiatingUserEmail.GetHashCode();
                if (this.InitiatingUserName != null)
                    hashCode = hashCode * 59 + this.InitiatingUserName.GetHashCode();
                if (this.ParticipantEmail != null)
                    hashCode = hashCode * 59 + this.ParticipantEmail.GetHashCode();
                if (this.ParticipantId != null)
                    hashCode = hashCode * 59 + this.ParticipantId.GetHashCode();
                if (this.ParticipantRole != null)
                    hashCode = hashCode * 59 + this.ParticipantRole.GetHashCode();
                if (this.SynchronizationId != null)
                    hashCode = hashCode * 59 + this.SynchronizationId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.VaultEventId != null)
                    hashCode = hashCode * 59 + this.VaultEventId.GetHashCode();
                if (this.VaultProviderName != null)
                    hashCode = hashCode * 59 + this.VaultProviderName.GetHashCode();
                if (this.VersionId != null)
                    hashCode = hashCode * 59 + this.VersionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
